import{_ as e,c as a,o as s,ae as i}from"./chunks/framework.Dgg8-8ov.js";const p=JSON.parse('{"title":"Get Racer Race Result","description":"","frontmatter":{},"headers":[],"relativePath":"endpoints/racers/get_racer_race_result.md","filePath":"endpoints/racers/get_racer_race_result.md"}'),r={name:"endpoints/racers/get_racer_race_result.md"};function l(n,t,h,d,o,c){return s(),a("div",null,t[0]||(t[0]=[i(`<h1 id="get-racer-race-result" tabindex="-1">Get Racer Race Result <a class="header-anchor" href="#get-racer-race-result" aria-label="Permalink to &quot;Get Racer Race Result&quot;">​</a></h1><p>Get the RaceResult for the Race for the given username and race_number</p><h3 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-label="Permalink to &quot;URL&quot;">​</a></h3><p><code>GET /v1/racers/&lt;username&gt;/races/&lt;race_number&gt;</code></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>username</code></td><td>string</td><td>The username of the Racer to get the RaceResult for</td></tr><tr><td><code>race_number</code></td><td>number</td><td>The number of the Race to get the RaceResult for</td></tr><tr><td><code>universe</code></td><td>string</td><td>The name of the universe to get the RaceResult for</td></tr><tr><td><code>keylog</code></td><td>boolean (optional)</td><td>If true, will return the keylog as part of the RaceResult - defaults to false</td></tr></tbody></table><h3 id="return-value" tabindex="-1">Return Value <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;Return Value&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Error</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">RaceResult</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8)]))}const u=e(r,[["render",l]]);export{p as __pageData,u as default};
