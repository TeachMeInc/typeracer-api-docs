import{_ as e,c as s,o as a,ae as i}from"./chunks/framework.Dgg8-8ov.js";const k=JSON.parse('{"title":"Get Race Results For Text","description":"","frontmatter":{},"headers":[],"relativePath":"endpoints/texts/get_text_race_results.md","filePath":"endpoints/texts/get_text_race_results.md"}'),l={name:"endpoints/texts/get_text_race_results.md"};function r(n,t,d,h,o,p){return a(),s("div",null,t[0]||(t[0]=[i(`<h1 id="get-race-results-for-text" tabindex="-1">Get Race Results For Text <a class="header-anchor" href="#get-race-results-for-text" aria-label="Permalink to &quot;Get Race Results For Text&quot;">​</a></h1><p>Get the RaceResults for the Text with the given text_id</p><p>NOTE: this endpoint will only return RaceResults from the last year</p><h3 id="url" tabindex="-1">URL <a class="header-anchor" href="#url" aria-label="Permalink to &quot;URL&quot;">​</a></h3><p><code>GET /v1/texts/&lt;text_id&gt;/races</code></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>text_id</code></td><td>number</td><td>The ID of the Text to get</td></tr><tr><td><code>universe</code></td><td>string (optional)</td><td>The Universe to get RaceResults for - will default to all Universes if omitted</td></tr><tr><td><code>n</code></td><td>number (optional)</td><td>The number of RaceResults to return - must be between 1 and 100 (default: 10)</td></tr><tr><td><code>after</code></td><td>DateTime (optional)</td><td>If provided, will only return RaceResults that occurred after the provided DateTime</td></tr><tr><td><code>before</code></td><td>DateTime (optional)</td><td>If provided, will only return RaceResults that occurred before the provided DateTime</td></tr></tbody></table><h3 id="return-value" tabindex="-1">Return Value <a class="header-anchor" href="#return-value" aria-label="Permalink to &quot;Return Value&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;success&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;error&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">Error</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">RaceResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9)]))}const u=e(l,[["render",r]]);export{k as __pageData,u as default};
